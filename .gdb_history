next
print left
print *left
next
print op
next
print right
print *right
next
print node
print *node
print *node->right
print *node->exp.right
print *node->exp.left
break parser.c:112
run
next
print node
next
print *noe
print *node
next
step
snext
next
print *node
next
run
bt
run
bt
break parse_for_symbol 
run
next
run
bt
run
bt
run
bt
make
break parse_assignable
break parse_assignable 
run
next
print *node
next
next
print node
print *node
next
print token
run
bt
run
bt
break parser.c:118
c
run
print op
print op
print op_token
print *op_token
make clean
run
break parse_for_symbol
run
bt
c
run
bt
break parse_for_parentheses 
run
next
break parse_expressionable
run
next
step
next
next
print res
break parse_expressionable_single
run
next
next
print token->cval
break parser.c:134
c
run
break parse_exp
c
run
c
next
print op
next
print node_left
print node_left->type
print *node_left
next
print *node_right
print *node_left
break parse_expressionable
run
next
print new_node
print *new_node
next
print *last_node
next
print *last_node
next
next
print *new_node
print last_mode
print last_node
break codegen_generate_root_node
run
break codegen_generate_root_node 
c
run
next
print node->type
print ndoe
print node
print *node
run
bt
run
bt
break codegen_generate_exp
break codegen_generate_exp_node
run
next
print node
print *node
print *node->left
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.left
next
print codegen_current_exp_state
c
next
print codegen_current_exp_state
break codegen_new_expression_state 
C
RUN
run
next
print state
next
print state
c
next
print state
next
pritn vector_back(current_process->generator.states.expr)
print vector_back(current_process->generator.states.expr)
print *(void**)vector_back(current_process->generator.states.expr)
print codegen_end_expression_state()
print *(void**)vector_back(current_process->generator.states.expr)
print codegen_current_exp_state()
run ./main
break codegen_new_expression_state 
run
next
print *codegen_current_exp_state
print *codegen_current_exp_state()
next
print *codegen_current_exp_state()
print codegen_current_exp_state()
next
print *codegen_current_exp_state()
next
print codegen_current_exp_state()
next
print codegen_current_exp_state()
next
print codegen_current_exp_state()
print *codegen_current_exp_state()
next
print *codegen_current_exp_state()
break codegen.c:103
c
run
print codegen_current_exp_state()
c
print codegen_current_exp_state()
break codegen.c:106
c
c
print codegen_current_exp_state()
print *codegen_current_exp_state()
break test
run
print *node
next
print *node
run
bt
run
bt
y
break parser.c:386
c
run
step
next
c
break parse_body_multiple_statements 
run
bt
run
bt
break parser.c:479
c
run
print token->sval
break buffer_printf
run
break codegen_generate_global_variable_with_value
run
next
printf buf
next
print buf
print buffer_ptr(buf)
print (char*)((buffer-
print (char*)((buffer_ptr(buf))
print *((char*)(buffer_ptr(buf))
print *((char*)(buffer_ptr(buf)))
break codegen_exp_to_buffer
run
next
print *node
break codegen_exp_write_to_buffer
run
next
print node
next
print node->inum
break buffer_printf
run
next
print len
print fmt
break codegen_exp_write_to_buffer 
run
next
print (const char*)buffer_ptr(buffer)
print (const char*)buffer_ptr(buffer)+2
print (const char*)buffer_ptr(buffer)+3
print (const char*)buffer_ptr(buffer)+4
