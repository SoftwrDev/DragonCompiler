c
break lexer.c:476
run
print c
c
print c
c
print c
c
break lexer.c:476
un
run
print lex_process->current_expression_count 
next
print lex_process->current_expression_count 
next
print token->between_brackets 
c
print lex_process->current_expression_count 
print token->between_brackets 
next
print token->between_brackets 
c
print lex_process->current_expression_count 
next
print token->between_brackets 
c
break preprocessor.c:531
run
print left_token->sval
print right_token->sval
break preprocessor_concat_tokens 
run
next
print joined_token_vec
print joined_token_vec->count
*(struct token*)(joined_token_vec->data)
print *(struct token*)(joined_token_vec->data)
break preprocessor.c:567
run
print arg_token
print *arg_token
print *right_token
break preprocessor.c:562
run
wprint *right_token
print *right_token
print *token
break preprocessor.c:554
run
print re
print res
print arg_name
break parser.c:1856
run
print *datatype_token
break preprocessor_handle_identifier_for_token_vector 
run
next
print *token
next
print definiton
print *definition
break preprocessor.c:1221
run
print token
print *token
break preprocessor.c:1221
run
step
next
print definition
print *definition
next
print *definition_val
step
next
step
next
step
next
print *definition->standard.value
print *(struct token*)definition->standard.value
print *(struct token*)definition->standard.value->data
next
break preprocessor.c:1224
run
step
next
next
next
print token->Sval
print token->sval
break parser_datatype_init_type_and_size_for_primitive
run
next
break parser_datatype_init_type_and_size_for_primitive
run
next
step
next
print *datatype
break codegen.c:1052
run
print mov_type_keyword
print reg_to_use
run
bt
run
bt
break parser.c:2501
run
print *parser_fixup_sys
print *parser_fixup_sys->fixyps
print *parser_fixup_sys->fixups
break fixups_reoslven
break fixups_resolve
c
next
print *fixup
print *fixup->private
print (struct parser_fixup*)*fixup->private
break datatype_struct_node_fix
c
next
print dtype
next
print dtype
print *dtype
next
next
run
bt
run
 bt
run
bt
rn
run
bt
run
bt
run
bt
break preprocessor_evaluate_joined_node
run
bt
break preprocessor_expecting_additional_node 
run
next
print *nod
print *node
next
ste
step
next
next
next
print *node
next
run
bt
break expressionable_parse_single_or_parentheses
run
c
break expressionable_parse_single_or_parentheses
run
next
print *(struct preprocessor_node*)(additional_node)
next
step
step
next
print *previous_node
print *node
print *node->parenthesis.left
print *node->parenthesis.exp 
print *node->parenthesis.exp 
break expressionable.c:203
run
next
print *(struct preprocessor_node*)exp_node
next
print *(struct preprocessor_node*)left_node
next
print
print *(struct preprocessor_node*)additional_node
print *(struct preprocessor_node*)additional_node->parentheses
print *((struct preprocessor_node*)additional_node)->parentheses
print *((struct preprocessor_node*)additional_node)->parenthesis 
print *((struct preprocessor_node*)additional_node)->parenthesis->exp
break expressionable.c:210
run
next
print *(struct expressionable_node*)exp_nide
print *(struct expressionable_node*)exp_node
print *(struct preprocessor_node*)exp_node
next
print *(struct preprocessor_node*)parentheses_node
print parentheses_node 
print *(struct preprocessor_node*)parentheses_node 
print *((struct preprocessor_node*)parentheses_node)->parenthesis.ep
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
next
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
next
break expressionable.c:388
run
print *(struct preprocessor_node*)(additional_node)
print *(struct preprocessor_node*)(additional_node)->
print *((struct preprocessor_node*)(additional_node))->parenthesis 
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp 
print *((struct preprocessor_node*)(additional_node))->exp 
print ((struct preprocessor_node*)(additional_node))->exp 
print *((struct preprocessor_node*)(additional_node))->exp->left
print *((struct preprocessor_node*)(additional_node))->exp->right
print *((struct preprocessor_node*)(additional_node))->exp->right->parenthesis 
print *((struct preprocessor_node*)(additional_node))->exp->right->parenthesis.exp
run
bt
run
bt
run
bt
break expressionable.c:379
run
break expressionable.c:379
ru
print *(struct preprocessor_node*)(additional_node 
print *(struct preprocessor_node*)(additional_node)
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
next
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(new_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))
print *((struct preprocessor_node*)(additional_node))
print *((struct preprocessor_node*)(new_node))
print *((struct preprocessor_node*)(new_node))
print *((struct preprocessor_node*)(new_node))->parenthesis.exp
break preprocessor_join_nodes
run
next
print *previous_node
prit *nod
print *node
print *node->exp
print *node->exp.left
print *node->exp.right
print *node->exp.right.parenthesis
print *node->exp.right.parenthesis.exp
runbt
run
bt
