run
bt
break parser.c:117
run
print *next_token
print next_token
break parse_exp
run
next
print *node
break parse_exp
run
next
print op
next
print *node
next
run
bt
run
bt
run
bt
break parser.c:62
run
break compiler.c:62
run
print *ptr
print *ptr->left
print *ptr->exp.left
breka compiler.c:62
run
break compiler.c:62
run
break compiler.c:62
run
print 8ptr
print *ptr
print *ptr->left
print *ptr->exp.left
print *ptr->exp.left.exp.left
print *ptr->exp.left.exp.right
break parse_exp
run
next
print left_node
print *left_node
next
print op
next
print *node_right
next
print node
print *node
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.right->exp.left
print *node->exp.right->exp.right
next
step
next
next
print *node_out
print **node_out
step
next
next
step
next
print left_node
print node->exp.op
print right_node->exp.op
step
next
print precedence_left
print precedence_right
print op_left
print op_right
step
next
next
print *node
print *node->left
print *node->exp.left
print *node->exp.right#
print *node->exp.right
(test(20)+90)uy
break compiler.c:62
run
print *ptr
print *ptr->exp.left
print *ptr->exp.right
function calls are parsed :) 
run
break parser.c:249
run
next
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.right->exp.left
print *node->exp.right->exp.right
print *node->exp.left
print *node
print *node->exp.left
print *node->exp.right
next
print *left_node
print *right_node
print *right_node->exp.left
print *right_node->exp.right
run
bt
break parse_exp
run
break parse_exp
rn
run
break parse_exp
run
next
step
next
break parse_exp
run
next
print token_peek_next()->sval
print token_peek_next()->sval
print token_peek_next()->sval
print token_peek_next()->type
break parse_for_parentheses
run
next
step
next
print op
print next_token
print next_token
print *next_token
step
step
next
step
print *next_token
next
print next_token
print next_token->type
print S_EQ(next_token->sval, op)
print next_token->sval
print op
print op
print next_token
print op[1]
print op[0]
print next_token->sval
print next_token->type
print next_token
break compiler.c:36
run
print *node
break expect_sym
run
next
bt
print c
next
print next_token
print *next_token
print *next_token
break expect_sym
run
next
print c
next
print *next_token
bt
break parse_keyword
run
next
print token
print *token
step
next
next
next
break parse_variable_or_function
run
next
print dtype
next
print name_token
print *name_token
next
step
next
run
bt
break codegen:201
run
bt
c
break codegen:201
run
next
breka codegen:201
run
break codegen:201
break codegen.c:201
run
bt
break codegen_generate_assignment_expression
run
next
break parser.c:686
run
bt
print *node
break symresolver_build
run
next
step
next
print process->symbol_tbl 
print vector_count(process->symbol_tbl)
break codegen_generate_root
run
next
print current_process
print *current_process
print *current_process->scope->current
print *current_process->scope->current->entites
print *current_process->scope->current->enttities
print *current_process->scope->current->entities 
print vector_count(current_process->scope->current->entities)
break codegen_generate_scope_variable
run
c
next
step
next
print offset
next
print offset
next
run
bt
break symresolver_get_symbol
run
next
print process
print name
next
print symbol
