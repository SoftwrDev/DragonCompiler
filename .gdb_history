print &token
print tmp
print **(struct token**)(tmp)
print *(struct token**)(tmp)
print token
break token_make_string
c
run
next
print c
next
print c
next
print buffer_ptr(buf)
print *(const char*)buffer_ptr(buf)
c
break token_make_string
c
run
next
c
run
bt
run
bt
break read_number_str
c
run
next
print buffer
print *buffer
print buffer_ptr(buffer)
print *buffer_ptr(buffer)
print *(char*)buffer_ptr(buffer)
print *(const char*)buffer_ptr(buffer)
print (const char*)buffer_ptr(buffer)
next
next
next
rub
run
bt
run
bt
run
bt
run
bt
break token_make_multiline_comment
c
run
next
run
bt
break parse
c
run
next
print node
break parse_next
c
run
next
print token
run
run
break parse
c
run
c
break parse
c
run
next
print process
print *process
print *process->token_vec
break vector_set_peek_pointer 
run
step
break compiler.c:31
c
run
break compile_file
break compile_file
run
next
print vector_count(process->node_tree_vec)
print vector_count(process->node_vec)
break vector_peek
c
run
next
print vector->pindex 
run
bt
break vector_peek
run
next
next
print ptr
next
break token_to_node 
run
next
break node_create
run
next
print node
print node
break node_create
run
next
print node
next
print node
run
break compiler.c:28
c
run
next
print ptr
print (struct node*)(process->node_tree_vec, 0)
print *((struct node*)vector_at(process->node_tree_vec, 0))
print *((struct node**)vector_at(process->node_tree_vec, 0))
print *((struct node*)vector_at(process->node_tree_vec, 0))
break parse
run
break vector_push
c
next
print elem
print (struct node*)(elem)
print *(struct node*)(elem)
print *(struct node**)(elem)
print **(struct node**)(elem)
break node_create
run
next
print node
next
print node
print &node
print *(struct node**)(&node)
step
next
print ptr
print *(void**)(ptr)
next
print node
print *node
next
break parser.c:84
run
next
c
c
c
c
c
break parse_next
run
next
c
next
c
next
print *token
break parse_exp
run
next
print left
print *left
next
print op
next
print right
print *right
next
print node
print *node
print *node->right
print *node->exp.right
print *node->exp.left
break parser.c:112
run
next
print node
next
print *noe
print *node
next
step
snext
next
print *node
next
run
bt
run
bt
break parse_for_symbol 
run
next
run
bt
run
bt
run
bt
make
break parse_assignable
break parse_assignable 
run
next
print *node
next
next
print node
print *node
next
print token
run
bt
run
bt
break parser.c:118
c
run
print op
print op
print op_token
print *op_token
make clean
run
break parse_for_symbol
run
bt
c
run
bt
break parse_for_parentheses 
run
next
break parse_expressionable
run
next
step
next
next
print res
break parse_expressionable_single
run
next
next
print token->cval
