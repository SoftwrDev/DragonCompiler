break token_make_special_number_hexadecimal
run
next
break lexer.c:550
run
print number
print number_str
break token_make_special_number_hexadecimal 
c
run
next
print number_str
next
print number
c
make
run
bt
run
bt
break preprocessor.c:1528
run
print function_name
print arguments
print arguments->count
print *arguments
print *arguments->arguments
break preprocessor_handle_definition_token
run
c
next
next
print name_token->sval
next
break preprocessor_is_next_macro_arguments 
run
next
print *last_token
print *current_token
next
next
print name_token
print name_token->sval
next
break preprocessor_handle_definition_token
run
next
c
next
print name_token-.
print name_token->sval
next
next
print value_token_vec->count
next
break preprocessor_handle_identifier
run
step
step
print token->Sval
print token->Sval
print token->sval
print *Token
next
print *token
c
print *token
c
print *token
c
print *token
c
print *token
print *token
print *token
print *token
bt
run
bt
run
bt
break preprocessor_evaluate_exp
run
next
print *node
break preprocessor_evaluate_function_call
run
next
next
print *arguments
print *arguments->arguments
break preprocessor.c:1319
run
print *node
c
print *node
c
break preprocessor_evaluate_function_call_argument
run
next
print *node
print *node->exp.left
print *node->exp.right
next
next
next
print arguments->arguments->count
break preprocessor_evaluate_function_call_argument
run
next
print arguments->arguments->count
next
next
print arguments->arguments->count
next
print arguments->arguments->count
next
print arguments->arguments->count
next
print arguments->arguments->count
print *node
break preprocessor_evaluate_function_call
run
next
run
bt
run
break preprocessor_parse_evaluate
run
next
break preprocessor_parsse_evaluate
break preprocessor_parse_evaluate 
run
next
print *token_vec
print (struct token*)(token_vec->data)
print *(struct token*)(token_vec->data)
print *(struct token**)(token_vec->data)
print **(struct token**)(token_vec->data)
print *(struct token**)(token_vec->data)
print **(struct token**)(token_vec->data)
break expressionable_parse
c
next
step
next
print *token
break preprocessor.c:1562
run
print *value_vec_targt
print *value_vec_target
print *defnition_token_vec
print *definition_token_vec
print *value_vec_target
next
break preprocessor.c:1201
run
break expressionable_parse_single
run
c
next
print *token
run
bt
run
bt
./main
break preprocessor.c:1223
run
print *node
step
break preprocessor.c:1223
run
print *node
bt
bt
break preprocessor.c:1482
run
print *node
step
next
step
next
print node->sval
next
print *definitiojn
break preprocessor.c:1482
run
step
next
step
next
print *definition
next
step
next
step
next
next
print *token
next
next
next
print *previous_node
print *(struct preprocessor_node*)previous_node
next
print res
bt
next
bt
run
bt
run
bt
run
bt
break preprocessor.c:664
rubn
run
print *definition
bt
break preprocessor.c:1393
run
print *right_operand
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->exp
c
print *right_operand->parenthesis->expc
print *right_operand->parenthesis->exp
break preprocessor.c:1393
run
step
next
print *root_node
next
next
next
run
bt
break lexer.c:702
run
print *process
print *process->token_vec
run
bt
