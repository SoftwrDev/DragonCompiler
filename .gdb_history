next
next
print left_node
print right_node
print node
print *(struct preprocessor_node*)(node)
print *(struct preprocessor_node*)(node->exp.left)
print (struct preprocessor_node*)(node->exp.left)
print (struct preprocessor_node*)(node->exp.left)
print (struct preprocessor_node*)(node->exp.left)->exp.left
print *(struct preprocessor_node*)(node->exp.left)->exp.left
print *(struct preprocessor_node*)(node->exp.left)
print *(struct preprocessor_node*)(node)->exp.left
print *(struct preprocessor_node*)(node
print *(struct preprocessor_node*)(node)
print *(struct preprocessor_node*)(node).exp
print *(struct preprocessor_node*)(node).exp.left
print (struct preprocessor_node*)(node).exp.left
print (struct preprocessor_node*)(node).exp
print (struct preprocessor_node*)(node)
print ((struct preprocessor_node*)(node))->exp.left
print *((struct preprocessor_node*)(node))->exp.left
print *((struct preprocessor_node*)(node))->exp.left.exp.left
print *((struct preprocessor_node*)(node))->exp.left.exp.left.left
print *((struct preprocessor_node*)(node))->exp.left.exp.left.exp.left
break expressionable.c:355
run
print *node
print *(struct preprocessor_node*)node
print *((struct preprocessor_node*)node)->exp.right
break preprocessor.c:689
run
print *node
print *node.exp.left
print *node.exp.right
print *node.exp.right.exp.left
print *node.exp.right.exp.right
print *node.exp.right
print *node.exp.left
break experssionable.c:254
break expressionable.c:254
run
print new_left_operand
print new_right_operand
print *(struct preprocessor_node*)new_right_operand
print *(struct preprocessor_node*)new_left_operand
print right_op
clear
make
break preprocessor.c:164
run
prirnt node
print node
print left_node
print right_jnode
print right_node
print *(struct preprocessor_node*)(right_node)
print *(struct preprocessor_node*)(left_node)
break preprocessor_set_expression_node 
run
next
print node
print *(struct preprocessor_node*)(node)
print *(struct preprocessor_node*)(node)->exp.left
print *((struct preprocessor_node*)(node))->exp.left
print *((struct preprocessor_node*)(node))->exp.right
run
bt
break preprocessor.c:688
run
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.left->exp.left
print *node->exp.left->exp.right
print *node->exp.left->exp.right
print *node->exp.left->exp.left
print *node->exp.left->exp
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node
print *node->exp.left
print *node->exp.right
break preprocessor.c:689
run
break preprocessor.c:688
run
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left.exp.left
clear
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.right
print *node->exp.right.exp.right
run
bt
break expressionable.c:256
run
print *(struct preprocessor_node*)(expressionable_node_pop())
print *(struct preprocessor_node*)(expressionable, expressionable_node_pop())
print *(struct preprocessor_node*)(expressionable_node-)
print *(struct preprocessor_node*)(expressionable_node_pop(expressionable))
run
bt
break preprocessor_set_expression_node
run
next
print node
print left_node
print right_node
break experessionable.c:254
break expressionable.c:254
run
print new_left_operand
print node
c
break expressionable.c:254
run
print new_left_operand 
print new_right_operand 
print node
break experessionable.c:250
break expressionable.c:250
run
print new_exp_left_node
print new_exp_right_node
print node_op
step
next
step
next
step
next
print *exp_node
print exp_node
next
print *(struct preprocessor_node*)(expressionable_node_pop(expressionable))
print op
print exp_node.exp.op
break expressionable.c:254
break expressionable.c:252
delete 1
run
next
print new_left_operand
print node
print node
print node
print node
print new_left_operand 
run
bt
q
break preprocessor.c:688
run
print node->exp.left
print node->exp.left->exp.left
print node->exp.left->exp.left->exp.left
print node->exp.left->exp.left->exp.left->exp.left
run
bt
break expressionable_parser_reorder_expression
run
c
c
c
c
break expressionable_parser_reorder_expression
run
next
print node
next
print left_node
print right_node
next
print left_node_type
next
print right_node_type
next
c
next
print node
next
print node_type
next
print left_node
print right_node
next
print left_node_type
print right_node_type
nextnext
next
print right_op
next
print main_op
next
next
next
print *node
print *(struct preprocessor_node*)node
print *(struct preprocessor_node*)node->exp.left
print *((struct preprocessor_node*)node)->exp.left
print *((struct preprocessor_node*)node)->exp.left.exp.left
print *((struct preprocessor_node*)node)->exp.left.exp.left.exp.left
print *((struct preprocessor_node*)node)->exp.left.exp.left.exp.left.exp.left
run
bt
run
bt
break experessionable.c:254
run
break expressionable.c:254
run
print new_left_opernad
print new_left_operand
print node
break preprocessor.c:687
run
print *node
print *node->exp.left
print *node->exp.left.exp.left
break preprocessor.c:688
run
print result
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.left
print *node
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.right
break preprocessor.c:688
run
print *node
print *node->exp.left
print *node->exp.right
