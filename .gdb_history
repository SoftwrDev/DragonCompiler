c
next
print *fixup
print *fixup->private
print (struct parser_fixup*)*fixup->private
break datatype_struct_node_fix
c
next
print dtype
next
print dtype
print *dtype
next
next
run
bt
run
 bt
run
bt
rn
run
bt
run
bt
run
bt
break preprocessor_evaluate_joined_node
run
bt
break preprocessor_expecting_additional_node 
run
next
print *nod
print *node
next
ste
step
next
next
next
print *node
next
run
bt
break expressionable_parse_single_or_parentheses
run
c
break expressionable_parse_single_or_parentheses
run
next
print *(struct preprocessor_node*)(additional_node)
next
step
step
next
print *previous_node
print *node
print *node->parenthesis.left
print *node->parenthesis.exp 
print *node->parenthesis.exp 
break expressionable.c:203
run
next
print *(struct preprocessor_node*)exp_node
next
print *(struct preprocessor_node*)left_node
next
print
print *(struct preprocessor_node*)additional_node
print *(struct preprocessor_node*)additional_node->parentheses
print *((struct preprocessor_node*)additional_node)->parentheses
print *((struct preprocessor_node*)additional_node)->parenthesis 
print *((struct preprocessor_node*)additional_node)->parenthesis->exp
break expressionable.c:210
run
next
print *(struct expressionable_node*)exp_nide
print *(struct expressionable_node*)exp_node
print *(struct preprocessor_node*)exp_node
next
print *(struct preprocessor_node*)parentheses_node
print parentheses_node 
print *(struct preprocessor_node*)parentheses_node 
print *((struct preprocessor_node*)parentheses_node)->parenthesis.ep
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
next
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
print *((struct preprocessor_node*)parentheses_node)->parenthesis.exp
next
break expressionable.c:388
run
print *(struct preprocessor_node*)(additional_node)
print *(struct preprocessor_node*)(additional_node)->
print *((struct preprocessor_node*)(additional_node))->parenthesis 
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp 
print *((struct preprocessor_node*)(additional_node))->exp 
print ((struct preprocessor_node*)(additional_node))->exp 
print *((struct preprocessor_node*)(additional_node))->exp->left
print *((struct preprocessor_node*)(additional_node))->exp->right
print *((struct preprocessor_node*)(additional_node))->exp->right->parenthesis 
print *((struct preprocessor_node*)(additional_node))->exp->right->parenthesis.exp
run
bt
run
bt
run
bt
break expressionable.c:379
run
break expressionable.c:379
ru
print *(struct preprocessor_node*)(additional_node 
print *(struct preprocessor_node*)(additional_node)
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
next
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(new_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))->parenthesis.exp
print *((struct preprocessor_node*)(additional_node))
print *((struct preprocessor_node*)(additional_node))
print *((struct preprocessor_node*)(new_node))
print *((struct preprocessor_node*)(new_node))
print *((struct preprocessor_node*)(new_node))->parenthesis.exp
break preprocessor_join_nodes
run
next
print *previous_node
prit *nod
print *node
print *node->exp
print *node->exp.left
print *node->exp.right
print *node->exp.right.parenthesis
print *node->exp.right.parenthesis.exp
runbt
run
bt
run
bt
break preprocessor.c:1567
run
print val
print *node
make
break preprocessor.c:1567
run
print joined_node->type
make
break preprocessor.c:1567
run
print joined_node->joined.right->type
break preprocessor.c:1561
run
print *root_node
print *root_node->exp.left
print *root_node->exp.right
print *root_node->exp.right.exp
print root_node->exp.right.exp
print root_node-
print root_node->type
print root_node->joined
print root_node->joined->left
print *root_node->joined->left
print *root_node->joined->right
print *root_node->joined->right.exp.left
print *root_node->joined->right.exp.right
print root_node->joined->right.exp
print *root_node->joined->right.exp.right4
print *root_node->joined->right.exp.right
print *root_node->joined->right.exp.right.exp.left
print *root_node->joined->right.exp.right.exp.right
print *root_node->joined->right.exp.right
break expressionable.c:388
run
print *previous_node
print *(struct preprocessor_node*)previous_node
next
print *(struct preprocessor_node*)additional_node 
print *((struct preprocessor_node*)additional_node)->exp.left
print *((struct preprocessor_node*)additional_node)->exp.right
print *((struct preprocessor_node*)additional_node)->exp.right.parenthesis 
print *((struct preprocessor_node*)additional_node)->exp.right.parenthesis.exp
print *((struct preprocessor_node*)additional_node)->exp.left.parenthesis.exp
print *((struct preprocessor_node*)additional_node)->exp.left
print *((struct preprocessor_node*)additional_node)->exp.right.parenthesis.exp
next
print *((struct preprocessor_node*)new_node))
print *((struct preprocessor_node*)new_node)
print *((struct preprocessor_node*)new_node)->parenthesis.exp
print *((struct preprocessor_node*)new_node)->parenthesis.exp
print *((struct preprocessor_node*)new_node)->joined.left
print *((struct preprocessor_node*)new_node)->joined.right
run
bt
run
bt
q
run
bt
break preprocessor.c:915
run
print definition->name
print name
next
print definition->name
print definition->name
c
next
print definition->name
print name
next
c
next
break preprocessor.c:915
run
c
break preprocessor.c:915
run
c
print *definition
break preprocessor.c:1250
run
print *name_token
break preprocessor.c:1789
run
print *definition
break preprocessor_handle_identifier_macro_call_argument_parse_parentheses
run
next
print *next_token
break preprocessor_handle_identifier_macro_call_argument_parse_parentheses
run
next
next
print *next_to
print *next_token
next
print *next_token
next
print *next_token
next
print *next_token
next
print value_vec->count
next
print *token
step
next
step
next
print arguments->count
print arguments->arguments->count
next
print arguments->arguments->count
