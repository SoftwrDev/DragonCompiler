run
print *exp
print *node
print *node->exp.left
print *node->exp.right
next
step
next
print op_left
print op_right
next
next
print precedence_left
print precedence_right
print *node
next
step
next
print *exp
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.right->left
print *node->exp.right->exp.left
print *node->exp.right->exp.right
break parser.c:262
run
print *node
print *node->exp.left
print *node->exp.right
print *node
print *node->exp.left
print *node->exp.right
break parser.c:262
run
print *node
print *node->left
print *node->exp.left
print *node->exp.right
print *node->exp.rightleft
print *node->exp.right.left
print *node->exp.right.exp.left
print right_node->exp.left
print *right_node->exp.left
print node->exp.left
print *node->exp.left
print node->Exp.op
print node->exp.op
new_node = (50*100)
print right_node->exp.left
print *right_node->exp.left
print *right_node->exp.right
next
break parser.c:27
run
print node
next
break parser.c:267
run
print node
print *node
op of zero? lol...
print node->left
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.left->left
print *node->exp.left->exp.left
print *node->exp.left->exp.left.exp.left
print *node->exp.left->exp.left.exp.left.exp.left
print *node->exp.left->exp.left.exp.left.exp.left.exp.left
print *node->exp.left->exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left->exp.left
print *node->exp
print *node
print *node
print *node.exp.left
print *node.exp.left.exp.left
print *node.exp.left.exp.right
print *node.exp.left
print *node
print *node->exp.right
print *node
print *node
run
bt
break compiler.c:37
run
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.left.exp.left
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.left.right
print *node->exp.left.exp.right
print *node->exp.left.exp.left
print *node->exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.right
print *node->exp.left.exp.right
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left.exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.left.exp.left.exp.left.exp.left.exp.left.exp.left
break parse_keyword_return
run
next
step
next
print *next_token
print eyword
print keyword
print next_token->type
print next_token
run
bt
y
run
bt
run
bt
make
y
make
break codegen_generate_statement_return
run
next
print *node->stmt.ret.exp
print *node->stmt.ret.exp->exp.left
print *node->stmt.ret.exp->exp.right
step
next
step
next
print entity.node->type
print *entity
print entity
run
bt
y
run
bt
break codegen_generate_scope_variable
run
next
print entity
next
print entity
print *entity
break parse_variable_or_function
run
next
print *name_token
next
print *name_token
print dtype
break parse_variable_or_function
run
next
print *dtype
print dtype
next
print *name_token
break parser.c:776
run
print *node
step
next
step
next
print node->_struct.name
break parse_struct
run
next
print body_variable_size 
break parser.c:562
run
bt
clear
make
run
bt
break parse_variable
run
next
print *name_token
print dtype
print *dtype
c
c
c
next
print *name_token
print *dtype
print *((struct node*)(symresolver_get_symbol("abc")->node)
print *((struct node*)(symresolver_get_symbol("abc")->node))
print *((struct node*)(symresolver_get_symbol(current_process, "abc")->node))
print *((struct node*)(symresolver_get_symbol(current_process, "abc")->data))
print *((struct node*)(symresolver_get_symbol(current_process, "abc")->data))->_struct
print ((struct node*)(symresolver_get_symbol(current_process, "abc")->data))->_struct
print ((struct node*)(symresolver_get_symbol(current_process, "abc")->data))->_struct.body_n
print *((struct node*)(symresolver_get_symbol(current_process, "abc")->data))->_struct.body_n
break parser_datatype_init
run
next
print datatype_out->size
next
print datatype_out->type_str
c
next
c
next
c
next
c
next
c
next
step
next
print sym
print *sym
print *sym->data
break parse_variable
run
next
print *dtype
c
c
c
next
print *dtype
break parse_function_body
c
run
break parse_variable
c
next
print *dtype
break parse_function
riun
run
break parse_variable
run
next
c
next
print *dtype
print *dtypey
