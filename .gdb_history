break node_create
run
next
print node
next
print node
run
break compiler.c:28
c
run
next
print ptr
print (struct node*)(process->node_tree_vec, 0)
print *((struct node*)vector_at(process->node_tree_vec, 0))
print *((struct node**)vector_at(process->node_tree_vec, 0))
print *((struct node*)vector_at(process->node_tree_vec, 0))
break parse
run
break vector_push
c
next
print elem
print (struct node*)(elem)
print *(struct node*)(elem)
print *(struct node**)(elem)
print **(struct node**)(elem)
break node_create
run
next
print node
next
print node
print &node
print *(struct node**)(&node)
step
next
print ptr
print *(void**)(ptr)
next
print node
print *node
next
break parser.c:84
run
next
c
c
c
c
c
break parse_next
run
next
c
next
c
next
print *token
break parse_exp
run
next
print left
print *left
next
print op
next
print right
print *right
next
print node
print *node
print *node->right
print *node->exp.right
print *node->exp.left
break parser.c:112
run
next
print node
next
print *noe
print *node
next
step
snext
next
print *node
next
run
bt
run
bt
break parse_for_symbol 
run
next
run
bt
run
bt
run
bt
make
break parse_assignable
break parse_assignable 
run
next
print *node
next
next
print node
print *node
next
print token
run
bt
run
bt
break parser.c:118
c
run
print op
print op
print op_token
print *op_token
make clean
run
break parse_for_symbol
run
bt
c
run
bt
break parse_for_parentheses 
run
next
break parse_expressionable
run
next
step
next
next
print res
break parse_expressionable_single
run
next
next
print token->cval
break parser.c:134
c
run
break parse_exp
c
run
c
next
print op
next
print node_left
print node_left->type
print *node_left
next
print *node_right
print *node_left
break parse_expressionable
run
next
print new_node
print *new_node
next
print *last_node
next
print *last_node
next
next
print *new_node
print last_mode
print last_node
break codegen_generate_root_node
run
break codegen_generate_root_node 
c
run
next
print node->type
print ndoe
print node
print *node
run
bt
run
bt
break codegen_generate_exp
break codegen_generate_exp_node
run
next
print node
print *node
print *node->left
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.left
next
print codegen_current_exp_state
c
next
print codegen_current_exp_state
break codegen_new_expression_state 
C
RUN
run
next
print state
next
print state
c
next
print state
next
pritn vector_back(current_process->generator.states.expr)
print vector_back(current_process->generator.states.expr)
print *(void**)vector_back(current_process->generator.states.expr)
print codegen_end_expression_state()
print *(void**)vector_back(current_process->generator.states.expr)
print codegen_current_exp_state()
run ./main
break codegen_new_expression_state 
run
next
print *codegen_current_exp_state
print *codegen_current_exp_state()
next
print *codegen_current_exp_state()
print codegen_current_exp_state()
next
print *codegen_current_exp_state()
next
print codegen_current_exp_state()
next
print codegen_current_exp_state()
next
print codegen_current_exp_state()
print *codegen_current_exp_state()
next
print *codegen_current_exp_state()
break codegen.c:103
c
run
print codegen_current_exp_state()
c
print codegen_current_exp_state()
break codegen.c:106
c
c
print codegen_current_exp_state()
print *codegen_current_exp_state()
