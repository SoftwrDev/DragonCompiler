print *right_entity
print right_entity
next
print result->next
print result->last_entity
print *result->last_entity
next
print *entity
bt
c
c
c
c
next
print *left_entity
print *right_entity
step
next
step
next
step
next
print offset
pritn new_pos
print new_pos
print right_entity->dtype
print left_entity->dtype
break resolver_follow_array
run
next
print *left_entity
print *resolver_result_peek(result)
break resolver_follow_struct_exp
run
mnext
next
print *left_entity
next
print *resolver_result_peek(result)
PRINT *node->exp.right
print *node->exp.right
break parse_array_brackets
run
break aprser.c:2142
run
break parser.c:15557
break parser.c:1557
run
next
print *node_peek()
print *node_peek()->exp.left
print *node_peek()->exp.right
break *
break parser_reorder_expression
run
next
print *node
print node->exp.left
print *node->exp.left
print *node->exp.right
next
print node->exp.left
print *node->exp.left
c
next
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.right.exp.left
print *node->exp.left
print *node->exp.right
next
next
breakparser.c:909
run
break parser.c:9098
break parser.c:909
run
print *node->exp.left
break parser.c:909
run
next
step
next
print *node->exp.right->exp.left
print *node->exp.left
step
next
print node_left
print *node_left
print  *node_right
next
print new_op
print *completed_node
next
print *completed_node->exp.left
print *completed_node->exp.right
yep that bit is right. now we have ([Cabc[3].x)
next
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.left.exp.left
print *node->exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.right
print *node->exp.left.exp.left.exp.left
print *node->exp.left.exp.left.exp.right
print *node->exp.left
print *node->exp.left.exp.left.exp.left
run
bt
run
bt
break parse_expressionable_root
run
c
c
c
break parse_expressionable_root
run
c
next
bt
step
next
step
next
print token
print *token
next
print *node_peek()
next
next
print *result_node
c
bt
break parser.c:1724
run
print *node->exp.left
c
break parser_exp_const_to_literal 
run
c
next
print *node->exp.left
print *node->Exp.right
print *node->exp.right
next
break parser_exp_const_to_literal
run
c
break parser_const_to_literal 
run
c
next
print node
step
next
print *node->exp.left
print *node->exp.right
bt
next
print node
nexxt
next
print result_node
next
print node->exp.left
print node->exp.right
print *node->exp.right
next
print node
print *node
step
next
print *node->exp.right
next
print node
next
print *node->exp.left
print *node->exp.right
next
print node
next
print *node->exp.right
print *node->exp.left
next
print *node->exp.right
next
print node
next
break parse_expressionable_root
run
next
next
print *node_peek()
c
next
next
print *node_peek()
next
c
bt
break parse_expressionable_for_op
run
next
break parser.c:1785
break 
break parser.c:1785
run
step
next
print *node_peek()
print *node_peek()->str
print node_peek()->sval
print *node_peek()->exp.left
print *node_peek()->exp.right
print *node_peek()->exp.right
print *node_peek()->exp.right
expression with no right operand.....
run
bt
break parser.c:848
run
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print node->exp.left
print *node->exp.left
print op
print node->op
print node->exp.op
print *node->exp.right
break parser.c:848
run
next
break parser.c:848
run
print *node
print *node->exp.left
print *node->exp.left.exp.right
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.left.exp.right.bracket 
print *node->exp.left.exp.right.bracket.inner 
print *node
print *node->exp.left
print *node->exp.right
break parser.c:909
run
print *node->exp.left
print *node->exp.right
print *node
