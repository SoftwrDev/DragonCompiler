run
step
step
step
print last_node
print last_node
step
print ptr
print ptr
step
print index
break parser.c1952
break parser.c:1952
run
print *token
step
next
step
next
break parse_keyword
run
next
print *token
next
step
next
print dtype
next
print name_token->sval
next
next
print token->sval
next
c
run
run
break parse_expressionable
run
next
step
next
print *token
step
next
next
print *node_left
print *node_right
print op
step
next
next
print *exp_node
next
print *exp_node
next
step
next
next
next
print *node_right
print *node_left
print op
next
print *exp_node
print *exp_node->exp.left
print *exp_node->exp.right
print *exp_node->exp.right->exp.left
print *exp_node->exp.right->exp.left
print *exp_node->exp.right
print *exp_node->exp.right->exp.right
print *exp_node->exp.right->exp.right
print *exp_node->exp.right->exp.right.parenthesis 
print *exp_node->exp.right->exp.right.parenthesis.exp
print *exp_node->exp.right->exp.right.parenthesis.exp.exp.left
print *exp_node->exp.right->exp.right.parenthesis.exp.exp.right
print *exp_node->exp
print *exp_node
print *exp_node->exp.left
print *exp_node->exp.right
print *exp_node->exp.right->exp.right
print *exp_node->exp.right->exp.left
run
bt
break parser.c:1526
run
prnt *parentheses_node
print *parenthes_node
print *parentheses_node
print *parentheses_node->parenthesis.exp
print *parentheses_node->parenthesis.exp->exp.left
print *parentheses_node->parenthesis.exp->exp.right
print *left_node
break parser.c:1523
run
bt
run
bt
break parse_exp_for_normal
break parse_exp_normal
run
next
next
print op
next
print *node_left
next
next
break parser.c:1365
run
print *node_left
next
next
next
run
run
bt
break parser.c:1374
run
break preprocessor.c:596
run
print current_token->whitespace
next
brak preprocessor.c:596
run
break preprocessor.c:596
run
next
next
print res
next
break preprocessor.c:598
run
print last_token
print last_token->whitespace
next
print *last_token
break preprocessor.c:597
run
print *last_token
next
print !last_token || !last_token->whitespace
next
break preprocessor.c:597
run
break parse_for_parentheses
run
next
print *exp_node
next
break parse_for_parentheses 
run
next
bt
break preprocessor.c:980
run
print *node
break expressionable_parse_single
run
next
print *token
next
break preprocessor_handle_if_token
run
next
next
next
print *node
break preprocessor_should_join_nodes 
run
break expressionable_parse_identifier
run
next
print *(struct preprocessor_node*)(node_ptr)
next
print *(struct preprocessor_node*)(node_ptr)
next
next
print previous_node
print *(struct preprocessor_node*)(previous_node)
print expressionable->flags
break preprocessor.c:1017
run
print *node
print *node->exp.left
print *node->exp.right
break codegen_generate_tenary
run
next
print *node->tenary
print node->tenary
print *node->tenary.true_node
next
step
next
print flags
step
step
print *node
step
next
step
next
step
next
layout asm
break main
run
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
next
nexti
break main
layout asm
run
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
break codegen_generate_tenary
run
next
print *node
print node->tenary
print *node->tenary->true_node
print *node->tenary->false_node
break main
run
layout asm
stepi
print $eax
STEPI
stepi
next
break main
layout asm
run
stepi
print $eax
20+30+40+50*10
print 20+30+40+50*10
stepi
print $eax
stepi
print $eax
stepi
print $eax
