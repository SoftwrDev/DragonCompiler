run
next
print stmt_node
next
print stmt_node
next
print stmt_node
print *stmt_node
next
print vector_count(body_vec)
break parse_body_multiple_statements
run
next
print vector_count(body)
print vector_count(body_vec)
bt
break parse_body_multiple_statements 
run
c
break parse_body
run
next
print vector_count(body_vec)
break codegen_generate_exp_node
run
next
print *node
print *node->right
print *node->exp.right
print *node->exp.right.right
print *node->exp.right.exp.right
print *node->exp.right.exp.right.exp.left
run
bt
break parsser_reorder_expressions
break parser_reorder_expressions 
run
next
print vector_count(exp_nodes)
print *(struct node*)(vector_peek_ptr(exp_nodes))
print *(struct node*)(vector_peek_ptr(exp_nodes)
print *(struct node*)(vector_peek_ptr(exp_nodes))
break parser_reorder_expressions 
run
next
print node
make clean
break parser_reorder_expressions 
run
next
print exp_nodes
print node
print *node
step
next
print vector->rindex
step
next
print node
run
bt
run
bt
break parser_reorder_expressions
run
next
print vector_count(exp_nodes)
next
print *node
next
print vector_back_ptr(exp_nodes)
next
break parser_reorder_expressions
run
next
step
next
print ptr
next
print *ptr
run
bt
run
bt
y
run
bt
y
run
bt
run
bt
break parser_reorder_expressions 
run
next
print *node
print *node->right
print node->right
break parser_reorder_expression
run
next
print *new_root_exp_node 
print *new_root_exp_node->left 
print *new_root_exp_node->exp.left
break parser_reorder_expression
delete0
break parser_reorder_expression
run
next
next
print *new_root_exp_node 
print *new_root_exp_node->left
print *new_root_exp_node->exp.left
print *new_root_exp_node->exp.right
next
break parser_reorder_expression
run
next
print *right_node
print *right_node->exp.left
print *right_node->exp.right
break parser_reorder_expression
run
next
next
print *node
print *node->exp->left
print *node->exp->right
print *node->exp->right->left
print *node->exp->right->exp->left
print *node->exp->right->exp.left
print *node
print *node->exp.right
break parser_reorder_expression
run
next
print *right_node
print *right_node->exp.right
print *right_node->exp.left
print *right_node->exp.left.left
print *right_node->exp.left.exp.left
print *right_node->exp.left.exp.right
print *right_node->exp.right.exp.right
print *right_node->exp.right.exp.left
print *right_node->exp.right
print *right_node->exp.left
print *right_node->exp.right
run
print *node_out
print node_out
print *node_out
bt
run
bt
print *node_out
break parser_reorder_expression
run
next
print *node_out
print **node_out
next
print **node_out
break parser_reorder_expression
run
next
print *new_root_exp_node 
next
next
print *node
print *node->left
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node
break parser_reorder_expression
run
next
next
print *node
print *node->exp.left
print *node->exp.left.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node
print *node->>right
print *node->exp.right
print *node->exp.op
print *node->exp.left.exp.op
print *node->exp.left.exp.op
print *node->exp.op
run
bt
run
bt
break parser_reorder_expressions
run
next
print *node_out
print **node_out
print ***node_out
print ***(struct node***)(node_out)
break parser_reorder_expression
run
break parser_reorder_expressions
run
next
print node_out
print *node_out
print *node_out
print vector_back(exp_nodes)
print vector_back(process->node_tree_vec)
print *(void**)(vector_back(process->node_tree_vec)) = 0x00
set *(void**)(vector_back(process->node_tree_vec)) = 0x00
next
print ptr
print *ptr
break parser_reorder_expression
break parser_reorder_expressions
run
next
print node_out
print *node_out
print **node_out
print *(struct node***)(node_out)
print **(struct node***)(node_out)
print ***(struct node***)(node_out)
run
bt
run
bt
print node
run
break parser_get_all_nodes_of_type_single
run
next
print type
next
print *node
print node
print *node
break parser_get_all_nodes_of_type_for_function
run
next
break parser_get_all_nodes_of_type_for_function
run
next
print func_arg
print func_args
print *func_args
step
next
step
next
run
