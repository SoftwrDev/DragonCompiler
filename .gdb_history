break preprocessor.c:597
run
break parse_for_parentheses
run
next
print *exp_node
next
break parse_for_parentheses 
run
next
bt
break preprocessor.c:980
run
print *node
break expressionable_parse_single
run
next
print *token
next
break preprocessor_handle_if_token
run
next
next
next
print *node
break preprocessor_should_join_nodes 
run
break expressionable_parse_identifier
run
next
print *(struct preprocessor_node*)(node_ptr)
next
print *(struct preprocessor_node*)(node_ptr)
next
next
print previous_node
print *(struct preprocessor_node*)(previous_node)
print expressionable->flags
break preprocessor.c:1017
run
print *node
print *node->exp.left
print *node->exp.right
break codegen_generate_tenary
run
next
print *node->tenary
print node->tenary
print *node->tenary.true_node
next
step
next
print flags
step
step
print *node
step
next
step
next
step
next
layout asm
break main
run
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
next
nexti
break main
layout asm
run
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
print $eax
stepi
break codegen_generate_tenary
run
next
print *node
print node->tenary
print *node->tenary->true_node
print *node->tenary->false_node
break main
run
layout asm
stepi
print $eax
STEPI
stepi
next
break main
layout asm
run
stepi
print $eax
20+30+40+50*10
print 20+30+40+50*10
stepi
print $eax
stepi
print $eax
stepi
print $eax
break parser.c:157
break parser.c:1570
run
print *left_node
break lexer.c:518
run
print c
print *token
print token
brak parser.c:1572
run
break parser.c:1572
run
print *left_node
break lexer.c:234
run
print len
print data
next
print i
print len
break expressionable_parse_tenary
run
break expressionable_parse
run
break expressionable_parse
run
break preprocessor_handle_definition_token
run
next
print *name_token
next
step
next
print name_token->sval
next
break preprocessor_handle_identifier
run
next
print *definition
next
print token->Sval
print token->sval
c
print token->sval
c
print token->sval
c
print token->sval
next
next
next
break preprocessor.c:1240
run
print token->sval
next
run
bt
run
bt
run
bt
run
bt
break expressionable.c:273
run
print *(struct preprocessor_node*)(current_node)
break preprocessor.c:908
run
print definition->count
print *definition
next
step
next
step
next
print token->Sval
print token->sval
print *token
break preprocessor.c:914
run
print val
break preprocessor_evaluate
run
break preprocessor_evaluate_exp
run
break preprocessor_evaluate_exp
run
next
print left_operand
next
print node->exp.right
print *node->exp.right
break preprocessor.c:996
run
next
next
run
bt
break expressionable.c:92
run
print next_token->sval
print next_token->cval
bt
run
bt
break expressionable.c:165
run
print *token
break expressionable_parse_symbol
run
next
print *token
next
c
break expressionable_parse_symbol
run
c
break expressionable.c:165
run
bt
break expressionable.c:153
run
next
run
bt
break expressionable_parse_symbol
run
next
print *token
next
print *token
break expressionable.c:153
run
next
print *token
run
bt
run
bt
break expressionable.c:65
run
