print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
break parser_reorder_expression
run
next
print node
print *node
print *node->exp.left
print *node->exp.right
print *node
c
next
print *node
print *node->exp.left
c
next
print *node
print *node->exp.left
print *node->exp
print *node
print *node->exp.right
print *node->exp.right->exp.left
break parser_reorder_expression
run
next
print *node
print *node->exp.left
print *node->exp.right
c
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
break parser_reorder_expression 
run
next
print *node
print *node->exp.left
print *node->exp.right
c
next
print *node
print *node->exp.left
print *node->exp.rig
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.left
print *node
next
print node->exp.left
print *node->exp.left
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.right
print *node
next
next
next
next
print node->exp.op
print right_op
break parser_reorder_expression
run
next
print *node
print *node->exp.left
print *node->exp.right
next
c
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.right
print *node->exp
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
print *node->exp.right
print *node->exp
print *node
next
print node->exp.op
print right_op
next
print *new_left_operand
print *new_left_operand->exp.left
print *new_left_operand->exp.right
next
print node->exp.right
print *node->exp.right
next
print *node
print *node->exp.left
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node
print *node->exp.right
print *node
next
c
next
print *node
print *node->exp.left
print *node->exp.right
next
print node->exp.op
print right_op
next
print new_exp_left_nod
print *new_Exp_left_node
print *new_exp_left_node
print *new_exp_right_node
print *new_exp_right_node->exp.left
print *new_exp_right_node->exp.right
print *new_exp_right_node
print *new_exp_left_node
next
next
print *node
next
print *node
print *node->exp.left
print *node->exp.left.exp.left
print *node->exp.left.exp.right
print *node->exp.left.exp.right.exp.left
print *node->exp.left.exp.right.exp.right
print *node->exp.left
print *node->exp.right
run
print node
print *node
break parser_reorder_expression
run
next
break parser_reorder_expression
rum
run
next
print *node
print *node->exp.left
print *node->exp.right
next
c
next
print *node
print *node->exp.left
print *node->exp.right
next
print right_op
print node->exp.op
step
next
print precedence_left
print precedence_right
print op_left
next
next
run
bt
y
run
bt
gdb ./main
break codegen_get_scope_variable_for_node 
run
next
print *left_node
bt
break codegen_generate_assignment_expression
run
next
break codegen_generate_assignment_expression
run
next
next
step
next
print *node
next
step
next
run
bt
y
make
break codegen_handle_codegen_entity_for_expression
run
next
print *node
run
run
run
bt
break parse_for_parentheses 
run
next
print *left_node
next
print onode
print *onode
run
run
run
bt
break parse_for_parentheses
run
next
step
next
print op
print op
print op_token
print *op_token
break codegen_generate_exp_node_for_arithmetic 
run
next
step
next
print flags
break codegen_gen_mov_or_add
run
next
next
step
next
print tmp_buf
break codegen_get_fmt_for_value
run
next
print value_node
print * value_node
break codegen_get_fmt_for_value
run
next
print *value_node
break _codegen_generate_exp_node
run
next
next
step
next
next
step
next
print *node
next
