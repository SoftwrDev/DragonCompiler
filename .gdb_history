break codegen.c:1281
run
print entity->func_call_data.stack_size 
step
next
print total_pushes
next
break codegen.c:1695
run
bt
print *node
print *node->exp.left
print *node->exp.right
break codegen.c:1694
run
break main
run
layout asm
stepi
run
bt
y
y
break codegen.c:1693
run
next
run
bt
run
bt
run
bt
break codegen_generate_exp_node_for_arithmetic
run
next
print *node
print *node->exp.left
print *node
break codegen.c:1636
run
print *left_node
print *right_node
print *right_node.tenary 
print right_node.tenary 
print right_node.tenary->true_node 
print *right_node.tenary->true_node 
print *right_node.tenary->false_node
break codegen.c:1639
run
print node->exp.op
make
run
bt
break codegen_can_gen_math
run
next
print flags
next
print $eax
break codegen_set_flag_for_operator
run
next
print flag
next
print flags
next
break codegen.c:1639
run
print op_flags
next
print op_flags
next
make
run
bt
break codegen.c:2510
run
step
next
break codegen.c:2495
run
print *stackframe_back(current_function)
run
run
bt
break main
run
layout asm
stepi
print $ebx
stepi
print $edx
print $eax
stepi
print $ebx
break main
run
layout asm
stepi
print $ebx
break main
run
layout asm
stepi
break main
run
layout asm
stepi
print $ebx
stepi
print $ebx
stepi
stepi
layout asm
stepi
run
stepi
break main
run
layout asm
stpei
stepi
print $edx
print $eax
stepi
print $eax
print $edx
print $ebx
stepi
print $edx
print $eax
break main
run
layout asm
stepi
break main
run
layout asm
stepi
print $ebx
stepi
print$ebx
print $ebx
stepi
break main
run
layotu asm
break main
layout asm
stepi
stepi
print Â£ebx
print $ebx
print *(int*)(ebp-0x08)
print *(int*)($ebp-0x08)
print (int)($ebp-0x08)
stepi
print $ebx
break codegen_generate_unary_indirection 
rn
run
next
print *node->unary.operand
break codegen_apply_unary_access
run
break codegen_generate_identifier
run
next
bt
break main
run
layout asm
stepi
print $eax
print $edx
stepi
print $ebx
stepi
print $ebx
print $ebx
stepi
print $ebx
stepi
print $edx
print $eax
stepi
stepi
print $ebx
stepi
print $ebx
stepi
print $ebx
$ebx = [$ebx]
set $ebx = [$ebx]
stepi
print $ebx
print $eax
stepi
brek main
run
break main
layout asm
run
stepi
stepi
print $ebx
stepi
print $eax
print $edx
stepi
break main
run
layout asm
stepi
print $ebx
stepi
print $ebx
stepi
print $eax
print $edx
stepi
print $ebx
stepi
print $ebx
stepi
print $eax
break main
run
layout asm
stepi
print $ebx
print $edx
print $eax
stepistepi
stepi
print $ebx
print $edx
stepi
print $eax
stepi
print $edx
print $eax
print $ebx
break parseer.c:617
run
break parser_append_size_for_node
runm
run
next
c
next
c
next
c
next
c
