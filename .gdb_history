print *node->stmt.ret.exp
break codegen_generate_statement_return 
run
next
break codegen_generate_number
break codegen_
break codegen_generate_number_node 
c
next
print node->sval
print node->type
print node->llnum
next
step
next
print *real_reg
step
break parse_expressionable
run
next
print *result_node
break parser_const_to_literal 
run
next
print node
print *node
next
break parser.c:1828
break parse_exp
c
run
c
print *node_pop()
print *node_pop()
break parse_exp_normal
run
bt
next
next
print op
next
next
print *node_right
next
print *exp_node
next
print *node_pop()
print node_push(exp_node)
next
print *result_node
next
print *result_node
next
print *node
next
break parser.c:1641
run
bt
break parser.c:1829
c
print *result_node
c
break parser_const_to_literal 
run
next
print *result_node
c
next
print *node
next
step
next
print node->exp.left->type
print node->exp.right->type
break parser.c:1840
break parser_reorder_expression 
c
run
c
c
c
c
c
c
break parser_reorder_expression 
break parser.c:1840
run
c
c
c
c
c
c
c
c
c
break parser.c:1805
run
print node->exp.left
print *node->exp.left
print *node->exp.right
print *node->exp.right.exp.left
print *node->exp.right.exp.right
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.right
break parser.c:1808
run
break parser.c:1808
run
print node->exp.left->llnum 
print node->exp.right->llnum 
break parser.c:1805
run
print node->exp.left->llnum 
print node->exp.right->llnum 
bt
break parse_expressionable_roo
break parse_expressionable_root
c
run
bt
c
break parse_expressionable_root
run
c
break parse_expressionable_root
run
next
next
step
step
next
step
next
break parse_expressionable_root
run
next
break parser_const_to_literal 
c
next
print *node
print *node->exp.left
print *node->exp.right
print *node->exp.right->exp.left
print *node->exp.right->exp.right
step
next
step
next
print *node->exp.left
print *node->exp.right
step
next
print *node
next
print *node
print *node->exp.left
print *node->exp.right
bt
break parser.c:1798
run
print *node
print *node->exp.left
print *node->exp.right
c
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.right
print *node->exp.left
print *node->exp.right
next
next
bt
next
print *node->exp.left
print *node->exp.right
print *node->exp.right->exp.left
print *node->exp.right->exp.right
step
step
print *node->exp.right->exp.right
print *node->exp.right
break parser_evaluate_to_numerical_node 
run
next
next
print left_node->llnum 
print right_node->llnum 
print op
next
print result
next
break parser.c:1808
run
print node->exp.left->llnum 
print node->exp.right->llnum 
print node->exp.right->llnum 
print node->exp.right->llnum 
print node->exp.right->llnum 
print &node->exp.right->llnum 
print &node->exp.left->llnum 
break parser.c:1806
run
print node->exp.right->type
print node->exp.right->exp.left->llnum 
print node->exp.right->exp.right->llnum 
step
next
step
next
print node->exp.left.llnum 
print node->exp.right.llnum 
next
step
next
next
print *node_peek_or_null()
break parser.c:1808
run
print *node->exp.left
print *node->exp.right
run
bt
break parser_evaluate_identifier_to_numerical_node
run
next
print val
break node.c:70
run
print var->const_val 
print *node
print entity->node
print *entity->node
print *entity->node->val
print *entity->node->var
print entity->node->var
 break parser_evaluate_identifier_to_numerical_node
run
next
print val
print *node
break parse_variable
run
next
print value_node->llnum 
step
next
step
next
run
bt
