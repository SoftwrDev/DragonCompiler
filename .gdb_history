print exp_node
break preprocessor.c:80
run
print exp_node
print left_node_ptr
break preprocessor.c:70
run
step
next
print *node
next
next
next
print *node_ptr
print *(struct preprocessor_node*)node_ptr
next
step
next
print expressionable->node_vec_out->count()
print expressionable->node_vec_out->count
next
break expressionable.c:135
run
print (struct preprocessor_node*)(node_ptr)
print *(struct preprocessor_node*)(node_ptr)
next
print *(struct preprocessor_node*)expressionable_node_pop(expressionable)
print expressionable_node_pop(expressionable)
run
bt
break experssionable.c:360
run
print exp_node
print exp_node
break expressionable_parse_for_operator
run
next
print op
next
print node_left
break experssionable.c:107
run
print last_node
break experessionable_node_pop
break expressionable_node_pop
run
next
print last_node
print expressionable->node_vec_ptr
print expressionable->node_vec_ptr
print expressionable->node_vec_out
print expressionable->node_vec_out->count
print vector_back(expressionable->node_vec_out)
break preprocessor.c:508
run
print node
print *node
print expressionable
print *expressionable
print expressionable->node_vec_out->count
break expressionable.c:135
run
print node_ptr
print *(struct preprocessor_node*)(node_ptr)
next
print node_ptr
print *(struct preprocessor_node*)(node_ptr)
print *(struct preprocessor_node*)expressionable_node_pop()
print *(struct preprocessor_node*)expressionable_node_pop(expressionable)
print *(struct preprocessor_node*)expressionable_node_pop(expressionable)
break preprocessor.c:135
run
break expressionable.c:135
run
print node_ptr
next
print expressionable_node_pop(expressionable
break expressionable.c:135
run
next
print *(struct expressionable*)expressionable_node_pop(expressionable)
break expressionable.c:135
run
next
print *(struct preprocessor_node*)expressionable_node_pop(expressionable)
break expressionable.c:55
run
next
print *(struct preprocessor_node*)expressionable_node_pop(expressionable)
break expressionable.c:55
run
step
next
print elem
print *(struct preprocessor_node*)(elem)
print *(struct preprocessor_node**)(elem)
print **(struct preprocessor_node**)(elem)
break expressionable.c:55
run
step
next
print ptr
next
print ptr
print *(struct preprocessor_node**)(ptr)
print **(struct preprocessor_node**)(ptr)
next
make
gdb ./main
break expressionable.c:135
run
print node_ptr
next
print **(struct preprocessor_node*)expressionable_node_pop(expressionable)
print **(struct preprocessor_node**)expressionable_node_pop(expressionable)
break expressionable.c:136
run
print **(struct preprocessor_node**)expressionable_node_pop(expressionable)
next
break preprocessor.c:508
run
print node
print *node
print expressionable->count
print expressionable->node_vec_out->count
break preprocessor.c:505
run
print expressionable->node_vec_out->count
next
print node
print *node
print *(struct preprocessor_node**)(node)
print **(struct preprocessor_node**)(node)
break preprocessor.c:508
run
print *node
break expressionable.c:136
run
print expressionable_node_pop(expressionable)
print *(struct preprocessor_node*)(0x555555570b00)
print *(struct preprocessor_node**)(0x555555570b00)
print **(struct preprocessor_node**)(0x555555570b00)
break preprocessor.c:508
run
print *node
break preprocessor.c:508
run
print *node
print *node->exp.left
print *node->exp.right
run
bt
break preprocessor.c:513
run
print node->const_val.sval
print node
print *node
print node->const_val.sval
print node->sval
break preprocessor_evaluate_exp
run
break preprocessor_evaluate
run
next
print current
print *current
print *current->exp.left
print *current->exp.right
next
next
print *root_node
print *current
break preprocessor_evaluate
run
next
step
next
step
next
next
next
print node->exp.op
next
print result
next
next
print result
next
print true_clause
step
next
run
but
bt
break preprocessor.c:590
run
print left_operand
print right_operand
break preprocessor.c:590
run
print left_operand
print right_operand
break preprocessor_arithmetic
run
next
print left_operand
pringt righ
print right_operand
print op
next
run
bt
break preprocessor_make_parentheses_node 
run
break expressionable_parse_parentheses 
run
break expressionable_parse_exp
run
next
print token->Sval
print token->Sval
print token->sval
next
step
next
next
next
next
print token->sval
nmake
break expressionable.c:204
run
step
next
print op_token
next
print op
break preprocessor_arithmetic 
run
next
print op
next
break preprocessor_arithmetic 
run
next
break preprocessor.c:588
delete 1
break preprocessor.c:688
run
print *node
prnt node->parenthesis
print node->parenthesis
print node->parenthesis->exp
print *node->parenthesis->exp
print *node->parenthesis->exp->exp.left
print *node->parenthesis->exp->exp.right
